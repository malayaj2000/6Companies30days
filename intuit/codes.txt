**************************************************1***************************************************
int minDifference(int arr[], int n)  { 
	    // Your code goes here
	    int sum = 0;
	    for(int i = 0;i<n;i++) sum += arr[i];
	    
	    vector<vector<int>> dp(n+1,vector<int>(sum+1,0));
	    for(int i = 0;i<n+1;i++) dp[i][0] = 1;
	    
	    
	    for(int i =1;i<n+1;i++){
	        for(int j = 1;j<sum+1;j++){
	            if(arr[i-1]<=j){
	                dp[i][j] = dp[i-1][j-arr[i-1]]|dp[i-1][j]; 
	            }else{
	                dp[i][j] = dp[i-1][j];
	            }
	        }
	    }
	    
	    int ans = 0;
	    for(int i = sum/2 ; i>=0 ;i--){
	        if(dp[n][i]) {
	            ans = sum - 2*i;
	            break;
	        }
	    }
	    return ans;
	} 


****************************************************2*************************************************
using pii = pair<int,int> ;
    bool isSafe(int i, int j, int row, int col)
{
    if (i >= 0 and i < row and j >= 0 and j < col)
        return 1;
    return 0;
}

int di[4] = {0, 0, -1, 1};
int dj[4] = {-1, 1, 0, 0};

    bool search(int i,int j,string w,int c,vector<vector<char>> &board,string temp,vector<vector<int>> &vis){
        temp+=board[i][j];
        vis[i][j] = 1;
        if(c==w.size()){
            if(temp == w) return 1;
            else return 0;
        }
        
        for(int dir = 0;dir<4;dir++){
            int ni = i + di[dir];
            int nj = j+ dj[dir];
            if(isSafe(ni,nj,board.size(),board[0].size()) and !vis[ni][nj] and w[c]==board[ni][nj]){
                if(search(ni,nj,w,c+1,board,temp,vis)) return 1;
            }
        }
        
        vis[i][j] = 0;
        return 0;
        
        
        
        
    }
    bool isWordExist(vector<vector<char>>& board, string word) {
        // Code here
        char start  = word[0];
        queue<pii> q;
        int n = board.size();
        int m = board[0].size();
        
        for(int i = 0;i<n;i++){
            for(int j = 0;j<m;j++){
                if(board[i][j]==start){
                    q.push({i,j});
                }
            }
        }
        
        while(!q.empty()){
            int i = q.front().first;
            int j = q.front().second;
            q.pop();
            int c = 0;
            string temp = "";
            vector<vector<int>> vis(n,vector<int>(m,0));
            if(search(i,j,word,c+1,board,temp,vis)) return 1;
        }
        return  0;
    }
    ******************************************3**************************************************
    ******************************************4**************************************************
    public:
    //Function to find the largest number after k swaps.
    using ll = long long int;
    
    void solve(string s,int k,string &ans,int c){       
        if(k==0){
           
            
            return ;
        }
        
        int mx = s[c];
        int n = s.size();
        for(int j = c+1;j<n;j++){
            if(mx<s[j]){
                mx = s[j];
            }
        }
        
        if(mx!=s[c]) k--;
        
        for(int j = n-1;j>=c;j--){
            if(s[j]==mx){
                swap(s[j],s[c]);
                if(ans<s) ans = s;
                solve(s,k,ans,c+1);
                swap(s[j],s[c]);
            }
        }
     
    }
    string findMaximumNum(string str, int k)
    {
       // code here.
       string ans = str;
       solve(str,k,ans,0);
       return ans;
    }
    ******************************************5**************************************************
    pair<bool,int> f(vector<int> &arr,int m,int k){
        int c = 1;
        int n = arr.size();
        int currsum = 0;
        for(int i = 0;i<n;i++){
            if(currsum + arr[i]>m){
                currsum = arr[i];
                c++;
            }else{
                currsum +=arr[i];
            }
        }
        
        if(c<=k) return {1,c};
        return {0,c};
    }
   int solve(vector<int> &arr,int k){
        int h = accumulate(arr.begin(),arr.end(),0);
        int l = *max_element(arr.begin(),arr.end());
        
        int ans = l;
        while(l<=h){
            int m = (l+h)/2;
            auto res = f(arr,m,k);
            if(res.first){
                //cout<<m<<endl;
                if(res.second == k) ans = m;
                
                h = m-1;
            }else{
                l = m+1;
            }
        }
        
        return ans;
    }
    int splitArray(vector<int>& nums, int m) {
        return solve(nums,m);
    }
    ******************************************6**************************************************
    int searchPeak(MountainArray &mountainArr,int n){
        int l = 0;
        int h = n-1;
        int mid ;
        while(l<=h){
            mid = (l+h)/2;
            int valmid = mountainArr.get(mid);
            int valmid_prev = ((mid-1<0)?(INT_MIN):(mountainArr.get(mid-1)));
            int valmid_next = ((mid+1<0)?(INT_MIN):(mountainArr.get(mid+1)));
            if((mid==0|| valmid_prev<=valmid) and (mid==n-1 || valmid_next<=valmid)) return mid;
            
            else if(valmid_next<=valmid){
                h = mid-1;
            }else{
                l = mid+1;
            }
        }
        
        return mid;
    }
    pair<bool,int> search(MountainArray &mountainArr,int l,int h,int t,bool flagL){
        
        int mid;
        while(l<=h){
            mid = (l+h)/2;
            int midval = mountainArr.get(mid);
            cout<<mid<<" "<<midval<<endl;
            if(midval==t) return {1,mid};
            if(flagL){
                   if(midval<t){
                     l = mid+1;
                }else{
                    h = mid-1;
                }
            }else{
                if(midval<t){
                      h = mid-1;
                }else{
                   l = mid+1;
                }
            }
         
        }
        
        return {0,0};
    }
    int findInMountainArray(int target, MountainArray &mountainArr) {
        int n = mountainArr.length();
        cout<<n<<endl;
        int peakloc = searchPeak(mountainArr,n);
        cout<<peakloc<<endl;
        auto l = search(mountainArr,0,peakloc,target,1);
        if(l.first) return l.second;
        auto r = search(mountainArr,peakloc+1,n-1,target,0);
        if(r.first) return r.second;
        
        return -1;
        
    }
    ******************************************7**************************************************
    bool f(int m,vector<int> &arr,int d){
        int currd = 1;
        int currW = 0;
        int n = arr.size();
        for(int i = 0;i<n;i++){
            if(arr[i]+currW>m){
                currd++;
                currW = arr[i];
            }else currW += arr[i];
        }
        
        if(currd<=d) return 1;
        return 0;
    }
    int shipWithinDays(vector<int>& weights, int days) {
        int h = accumulate(weights.begin(),weights.end(),0);
        int l = *max_element(weights.begin(),weights.end());
        
        int ans = h;
        while(l<=h){
            int mid = (l+h)/2;
            
            if(f(mid,weights,days)){
                ans = mid;
                h = mid-1;
            }else{
                l = mid+1;
            }
        }
        
        return ans;
    }
******************************************************8*******************************************************

*********************************************9****************************************************************
using pii = pair<int,int>;
    int di[4] = {0,0,1,-1};
    int dj[4] = {1,-1,0,0};
    bool isSafe(int i,int j,int n,int m){
        if(i<0 || j<0 || i>=n || j>=m) return 0;
        return 1;
    }
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        queue<pii> q_p,q_a;
        int n = heights.size();
        int m = heights[0].size();
        for(int i = 0;i<n;i++){
            q_p.push({i,0});
            q_a.push({i,m-1});
        }
        for(int j =1;j<m;j++){
             q_p.push({0,j});
            q_a.push({n-1,j-1});
        }
        vector<vector<int>> vis(n,vector<int>(m,-1));
        
        while(!q_p.empty()){
            pii loc = q_p.front();
            q_p.pop();
            int i = loc.first;
            int j = loc.second;
            vis[i][j] = 1;
            for(int dir = 0;dir<4;dir++){
                int ni = i + di[dir];
                int nj = j + dj[dir];
                if(isSafe(ni,nj,n,m) and heights[ni][nj]>=heights[i][j] and vis[ni][nj]==-1){
                    q_p.push({ni,nj});
                }
            }
        }
        
        vector<vector<int>> ans;
        while(!q_a.empty()){
            
            pii loc = q_a.front();
            q_a.pop();
            int i = loc.first;
            int j = loc.second;
            
            if(vis[i][j]==1){
                ans.push_back({i,j});
            }
            vis[i][j]=  2;
            
            for(int dir = 0;dir<4;dir++){
                int ni = i + di[dir];
                int nj = j + dj[dir];
                if(isSafe(ni,nj,n,m) and heights[ni][nj]>=heights[i][j] and vis[ni][nj]!=2){
                    q_a.push({ni,nj});
                }
            }
            
        }
        
        return ans;
        
    }
*******************************************************10*****************************************************
void dfs(int node,vector<int> &vis,vector<vector<int>>& isConnected,int v){
        vis[node] = 1;
        for(int child = 0;child<v;child++){
            if(child!=node and isConnected[node][child] and !vis[child]){
                dfs(child,vis,isConnected,v);
            }
        }
    }
    int findCircleNum(vector<vector<int>>& isConnected) {
        int v = isConnected.size();
        vector<int> vis(v,0);
        int count  =0;
        for(int i = 0;i<v;i++){
            if(!vis[i]){
                count++;
                dfs(i,vis,isConnected,v);
            }
        }
        
        return count;
    }
*******************************************************11****************************************************

*********************************************************12*************************************************
 using graph = vector<vector<int>> ;
    void buildGraph(graph &g,vector<vector<int>> &edge){
        for(auto e:edge){
            g[e[1]].push_back(e[0]);
        }
    }
    bool iscycle(int node,graph &g,vector<int> &vis,vector<int> &dfsvis){
        vis[node] = 1;
        dfsvis[node] = 1;
        for(auto child:g[node]){
            if(!vis[child]){
                if(iscycle(child,g,vis,dfsvis)) return 1;
            }
            else if(dfsvis[child]) return 1;
        }
        dfsvis[node] = 0;
        
        return 0;
    }
    bool containCycle(graph &g,int v){
        vector<int> vis(v,0);
        vector<int> dfsvis(v,0);
        
        for(int i = 0;i<v;i++){
            if(iscycle(i,g,vis,dfsvis)) return 1;
        }
        return 0;
    }
    void toposort(int node,stack<int> &st,graph &g,vector<int> &vis){
        vis[node] = 1;
        for(auto child:g[node]){
            if(!vis[child]) toposort(child,st,g,vis);
        }
        cout<<node<<endl;
        st.push(node);
    }
    void solve(graph &g,stack<int> &st,int v){
        
        vector<int> vis(v,0);
        for(int i = 0;i<v;i++){
           if(!vis[i]) toposort(i,st,g,vis);
        }
    }
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        int n  = numCourses;
        if(n==1) return {0};
        
        graph g(n);
        
        buildGraph(g,prerequisites);
       
        
        if(containCycle(g,n)) return {};
        
        else{
            vector<int> ans;
            stack<int> st;
            solve(g,st,n);
            while(!st.empty()){
                ans.push_back(st.top());
                st.pop();
            }
            return ans;
        }
        
    }
************************************************************13***********************************************
int find(vector<int> &arr,int key,int s){
        for(int i = s;i<arr.size();i++){
            if(arr[i]>=key) return i;
        }
        return -1;
    } 
    int minSwaps(vector<vector<int>>& grid) {
        vector<int> v;
        int n = grid.size();
        int m = grid[0].size();
        for(int i = 0;i<n;i++){
            int zero = 0;
            for(int j = m-1 ;j>=0;j--){
                if(grid[i][j]==0) zero++;
                else break;
            }
            v.push_back(zero);
        }
        int swap  = 0;
        for(int i = 0;i<n;i++){
            int reqZero = m-i-1;
            int idx = find(v,reqZero,i);
            if(idx==-1) return -1;
            else{
                
                swap += abs(i-idx);
                int val = v[idx];
                //cout<<swap<<" "<<idx<<endl;
                v.erase(v.begin()+idx);
                v.insert(v.begin()+i,val);
                //for(auto it:v) cout<<it<<" ";
                //cout<<endl;
            }
        }
        return swap;
    }
********************************************************14*************************************************
 using pii = pair<int,int> ;
    int di[4] = {0,0,1,-1};
    int dj[4] = {-1,1,0,0};
    bool isSafe(int i,int j,int n,int m){
        if(i<0 || j<0 || i>=n||j>=m) return 0;
        return 1;
    }
    int maxDistance(vector<vector<int>>& grid) {
        queue<pii> q;
        int n = grid.size();
        int m = grid[0].size();
        
        for(int i = 0;i<n;i++){
            for(int j = 0;j<m;j++){
                if(grid[i][j]==1) {
                    q.push({i,j});
                }
            }
        }
        if(q.empty() || q.size()==n*m) return -1;
        vector<vector<int>> vis(n,vector<int>(m,INT_MAX));
        
        while(!q.empty()){
            int i = q.front().first;
            int j = q.front().second;
            q.pop();
            if(grid[i][j]==1){
                vis[i][j] = 0;
            }
            
            for(int dir = 0;dir<4;dir++){
                int ni = i + di[dir];
                int nj = j + dj[dir];
                if(isSafe(ni,nj,n,m) and vis[ni][nj]>vis[i][j]+1){
                    vis[ni][nj] = vis[i][j]+1;
                    q.push({ni,nj});
                }
            }
            
        }
        int mx = INT_MIN;
           for(int i = 0;i<n;i++){
            for(int j = 0;j<m;j++){
                if(grid[i][j]==0) {
                    mx = max(mx,vis[i][j]);
                }
            }
        }
        return mx;
        
    }
******************************************************15****************************************************
int f(int mid ,vector<int>& piles, int H){
        int h =0;
        for(auto it:piles){
            h += (it + mid - 1) / mid;
        }
        
        return h<=H; 
    }
    int minEatingSpeed(vector<int>& piles, int H) {
        
        int  l = 1;
        int h = *max_element(piles.begin(),piles.end());
        
        while(l<=h){
            int mid = (l+h)/2;
            
            if(f(mid,piles,H)){
                h = mid-1;
            }
            else{
                l = mid+1;
            }
        }
        
        return l;
    }
********************************************************end**************************************************