******************************************************1*****************************************************
public:
    using ll = long long int;
    using vec3 = vector<vector<vector<ll>>>; 
    using vec1 = vector<ll> ;
    using vec2 = vector<vector<ll>>;
  
  int solve(int arr[],int n,int T){
      vec2 dp(n+1,vec1(T+1,0));
        for(int j =0;j<T+1;j++) dp[0][j] = 0;
        for(int i =0;i<n+1;i++) dp[i][0] = 1;
        
        for(int i  = 1;i<n+1;i++){
            for(int j = 1;j<T+1;j++){
                if(arr[i-1]<=j){
                    dp[i][j] =  dp[i-1][j-arr[i-1]]||dp[i-1][j];
                }
                else{
                    dp[i][j] =  dp[i-1][j];
                }
            }
        }
        
        for(int j = T/2;j>=0 ;j--){
            if(dp[n][j]) return T - 2*j;
        }
        
        
  }
	int minDifference(int arr[], int n)  { 
	    // Your code goes here
	    // diff = sum - 2 *S1
	    // max val of S1 = sum/2;
	    // check which sum if possible fron 0 ... sum
	    // return first possible value(s1) from sum/2   
	    int sum = 0;
	    for(int i = 0;i<n;i++) sum += arr[i];
	    
	    return solve(arr,n,sum);
	} 
******************************************************2*******************************************************
using ll = long long int;
using ull = unsigned long long int;
using pss = pair<string, string>;
using pll = pair<ll, ll>;
#define inf LLONG_MAX
#define ninf LLONG_MIN
ll mod = 1e9 + 7;

using vec3 = vector<vector<vector<ll>>>; 
using vec1 = vector<ll> ;
using vec2 = vector<vector<ll>>;

    void BuildGraph(vec2 &graph,vector<pair<int, int> >& prerequisites){
        for(auto e:prerequisites){
            graph[e.first].push_back(e.second);
        }
    } 
 
bool isCycle(int node,vec2 &graph,vec1 &vis,vec1 &dfsvis){
    vis[node] = 1;
    dfsvis[node] = 1;
    for(auto child:graph[node]){
        if(!vis[child]){
            if(isCycle(child,graph,vis,dfsvis)) return 1;
        }
        else if(dfsvis[child]) return 1;
    }

    dfsvis[node] = 0;
    return 0;

}
	bool isPossible(int N, vector<pair<int, int> >& prerequisites) {
	    // Code here
	    vec2 graph(N);
	    BuildGraph(graph,prerequisites);
	    
	    vec1 vis(N,0);
	    vec1 dfsVis(N,0);
	    for(int node = 0;node<N;node++){
	        //cout<<"Call"<<endl;
	        if(!vis[node]) if(isCycle(node,graph,vis,dfsVis)) return 0;
	    }
	    
	    return 1;
	}
****************************************************3********************************************************
void rotate(vector<vector<int> >& matrix)
{
    // Your code goes here
    int n = matrix.size();
    int m = matrix[0].size();
    
    for(int i = 0;i<n;i++){
        for(int j = i;j<m;j++){
            int temp = matrix[i][j];
            matrix[i][j] = matrix[j][i];
            matrix[j][i] = temp;
        }
    }
    
    for(int k = 0;k<m;k++){
        int i = 0;
        int j = n-1;
        while(i<j) {
            swap(matrix[i][k],matrix[j][k]);
            i++;
            j--;
        }
    }
    
}
************************************************4***********************************************************
 vector<int> spirallyTraverse(vector<vector<int> > matrix, int r, int c) 
    {
        // code here 
         int rl = 0;
    int rh = r-1;
    int cl = 0;
    int ch = c-1;
    vector<int> arr(r*c);
    int k = 0;
    while(rl<=rh and cl<=ch){
        for(int it = cl ;it<=ch ;it++){
            arr[k++] = matrix[rl][it];
        } rl++;
        if(k==r*c) break;
        for(int it = rl ;it<=rh ;it++){
            arr[k++] = matrix[it][ch];
        } ch--;
        if(k==r*c) break;
        for(int it = ch ;it>=cl ;it--){
            arr[k++] = matrix[rh][it];
        } rh--;
        if(k==r*c) break;
        for(int it = rh ;it>=rl ;it--){
            arr[k++] = matrix[it][cl];
        } cl++;
        if(k==r*c) break;
    }
    
    return arr;
    }
*****************************************************5********************************************************
vector <int> calculateSpan(int price[], int n)
    {
       // Your code here
       stack<int> st;
       vector<int> span(n);
       for(int i = n-1;i>=0 ;i--){
           
           if(st.empty()){
               st.push(i);
           }
           else{
               while(!st.empty() and price[i]>=price[st.top()]){
                   span[st.top()] = st.top() - i;
                   st.pop();
               }
               st.push(i);
           }
       }
       
       while(!st.empty()){
           span[st.top()] = st.top()+1;
           st.pop();
       }
       
       return span;
    }
*************************************************6***********************************************************
 vector<string> vec;
    unordered_map<int,vector<char>> mp;
    
    void solve(int arr[],int i,int n,string s){
        if(i>=n){
            vec.push_back(s);
            return;
        }
        for(auto ch:mp[arr[i]]){
            solve(arr,i+1,n,s+ch);
        }
    }
    vector<string> possibleWords(int a[], int N)
    {
        //Your code here

            
    mp[2] = {'a','b','c'};
    mp[3] = {'d','e','f'};
    mp[4] = {'g','h','i'};
    mp[5] = {'j','k','l'};
    mp[6] = {'m','n','o'};
    mp[7] = {'p','q','r','s'};
    mp[8] = {'t','u','v'};
    mp[9] = {'w','x','y','z'};
        vec.clear();
        solve(a,0,N,"");
        
        return vec;
    }
**************************************************************7***********************************************
bool is_valid(int i,int j,int n,int m){
        if(i<0 || i>=n || j<0 || j>=m) return 0;
        return 1;
    }
    void dfs(vector<vector<int>>& grid ,int i,int j,vector<vector<int>> &vis,int &count){
        int n = grid.size();
        int m = grid[0].size();
        vis[i][j] =1;
        count++;
        int dx[] = {0,0,-1,1,-1,-1,1,1};
        int dy[] = {-1,1,0,0,-1,1,-1,1};
        for(int k =0;k<8;k++){
            int ni = i+dx[k];
            int nj = j+dy[k];
            if(is_valid(ni,nj,n,m) and grid[ni][nj]==1 and !vis[ni][nj]){
                dfs(grid,ni,nj,vis,count);
            }
        }
    }
    int findMaxArea(vector<vector<int>>& grid) {
        // Code here
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> vis(n,vector<int>(m,0));
        int ans = INT_MIN;
        int count = 0;
        for(int i =0;i<n;i++){
            for(int j =0;j<m;j++){
                if(grid[i][j]==1 and !vis[i][j]){
                    dfs(grid,i,j,vis,count);
                    ans = max(ans,count);
                    count = 0;
                }
            }
        }
        return ans;
    }
*********************************************************8****************************************************
void connect(Node *root)
    {
       // Your Code Here
       queue<Node*> q;
       q.push(root);
       while(!q.empty()){
           int n = q.size();
           while(n--){
               Node*temp = q.front();
               q.pop();
               
               if(n!=0){
                   temp->nextRight = q.front();
                  
               }
                if(temp->left) q.push(temp->left);
                if(temp->right) q.push(temp->right);
           }
       }
    }    
************************************************9*************************************************************
int solve(Node*root,int x,int &count){
    if(!root) return 0;
    
    int lSum = solve(root->left,x,count);
    int rSum = solve(root->right,x,count);
    
    if(root->data + lSum + rSum ==x) count++;
    
    return root->data + lSum + rSum;
}
int countSubtreesWithSumX(Node* root, int X)
{
	// Code here
	int count  = 0;
	solve(root,X,count);
	return count;
}
****************************************************10******************************************************
int FindMaxSum(int arr[], int n)
    {
        // Your code here
        vector<int> dp(n+1);
        dp[0] = 0;
        dp[1] =arr[0];
        int ans = arr[0];
        for(int i  =2;i<n+1;i++){
            dp[i] = dp[i-2] + arr[i-1];
            ans = max(ans,dp[i]);
        }
        
        return ans;
    }
*********************************************************11**************************************************
vector<string> vec;
string Dec2Bin(int n){
    string s = "";
    while(n!=1){
        int rem = n%2;
        n = n/2;
        s += to_string(rem);
    }
    s += to_string(n);
    reverse(s.begin(),s.end());
    return s;
}
vector<string> generate(int N)
{
	// Your code here
	vec.clear();
	for(int i = 1;i<=N;i++){
	    vec.push_back(Dec2Bin(i));
	}
	return vec;
}
************************************************12************************************************************
vector<vector<int>> Sum(int l,int h,int t,vector<int> &arr){
        vector<vector<int>> vec;
        while(l<h){
            if(arr[l]+arr[h]==t){
                vector<int> temp;
                temp.push_back(arr[l]);
                temp.push_back(arr[h]);
                vec.push_back(temp);
                while(l<h and arr[l]==arr[l+1]) l++;
                l++;
                while(l<h and arr[h]==arr[h-1]) h--;
                h--;
            }
            else if(arr[l]+arr[h]>t) h--;
            else l++;
        }
        return vec;
    }
    vector<vector<int> > fourSum(vector<int> &arr, int k) {
        // Your code goes here
        sort(arr.begin(),arr.end());
        vector<vector<int>> ans;
        int n = arr.size(); 
        for(int i = 0;i<n;i++){
            for(int j = i+1;j<n;j++){
                int T = k - (arr[i] + arr[j]);
                //if(T<0) continue;
                vector<vector<int>> temp = Sum(j+1,n-1,T,arr);
                if(temp.size()){
                    for(auto vec:temp){
                        vec.push_back(arr[i]);
                        vec.push_back(arr[j]);
                        sort(vec.begin(),vec.end());
                        ans.push_back(vec);
                    } 
                }
                while(j<n-1 and arr[j]==arr[j+1]) j++;
            }
            while(i<n-1 and arr[i]==arr[i+1]) i++;
        }
        return ans;
    }
*******************************************************13**************************************************
void dfs(int node,vector<int> adj[],int V,int u,int v,vector<int> &vis){
        vis[node] =1;
        for(auto child:adj[node]){
            if((child==u and node == v) or (node ==u and child==v)) continue;
            if(!vis[child]){
                dfs(child,adj,V,u,v,vis);
            }
        }
    }
    int NumIsland(vector<int> adj[],int V,int u = -1,int v = -1){
        
        vector<int> vis(V,0);
        int count = 0;
        for(int i = 0;i<V;i++){
            if(!vis[i]){
                dfs(i,adj,V,u,v,vis);
                count++;
            }
        }
        
        return count;
    }
    int isBridge(int V, vector<int> adj[], int c, int d) 
    {
        // Code here
        int initCount = NumIsland(adj,V);
        int finalCount  = NumIsland(adj,V,c,d);
        
        return initCount!=finalCount;
        
        
    }
********************************************************14****************************************************
int minSteps(int D){
        // code here
        D = abs(D);
        int step = 0;
        int sum = 0;
        while(sum<D or (sum-D)%2!=0){
            step++;
            sum += step;
        }
        
        return step;
    }

*******************************************************15*****************************************************
void dfs(int node,vector<int> adj[],vector<int> &vis,stack<int> &st){
        vis[node] = 1;
        for(auto child:adj[node]){
            if(!vis[child]) dfs(child,adj,vis,st);
        }
        st.push(node);
    }
    void TopoSort(stack<int> &st ,vector<int> adj[],int V){
        vector<int> vis(V,0);
        for(int i = 0;i<V;i++){
            if(!vis[i]) dfs(i,adj,vis,st);
        }
    }
    string findOrder(string dict[], int N, int K) {
        //code here
        vector<int> adj[K];
        for(int i = 0;i<N-1;i++){
            string w1 =  dict[i];
            string w2 = dict[i+1];
            
            for(int j = 0;j<min(w1.size(),w2.size());j++){
                if(w1[j]!=w2[j]){
                    adj[w1[j]-'a'].push_back(w2[j]-'a');
                    break;
                }
            }
        }
        
        stack<int> st;
        TopoSort(st,adj,K);
        string s = "";
        while(!st.empty()){
            s += 'a' + st.top();
            st.pop();
        }
        
        return s;
    }
********************************************************end***************************************************





