************************************************* 1 ******************************************************
vector<vector<string> > Anagrams(vector<string>& string_list) {
        //code here
        int n = string_list.size();
        vector<int> vis(n,0);
        vector<vector<string>> ans;
        vector<unordered_map<char,int>> Vecmp;
        for(int i =0;i<n;i++){
            unordered_map<char,int> mp;
            for(auto ch:string_list[i]) mp[ch]++;
            Vecmp.push_back(mp); 
        }
        for(int i =0;i<n;i++){
            if(vis[i]) continue;
            vis[i] = 1;
            vector<string> ds;
            ds.push_back(string_list[i]);
            for(int j =i+1 ;j<n;j++){
                if(vis[j]) continue;

                if(Vecmp[i]==Vecmp[j]){
                    ds.push_back(string_list[j]);
                    vis[j] =1;
                }
            }
            ans.push_back(ds);
        }

        return ans;
    }
**************************************************2**************************************************
int doOverlap(int L1[], int R1[], int L2[], int R2[]) {
        // code here
        if(R1[0] < L2[0] || R2[0]< L1[0] || L1[1]<R2[1] || L2[1]<R1[1]) return 0;
        return 1;
    }

*****************************************************3***************************************************
using ll = long long int;
class Solution{
  public:
    int countSubArrayProductLessThanK(const vector<int>& a, int n, long long k) {
        // 1 2 6 24
        ll i = 0;
        ll j = 0;
        ll ans  = 0;
        ll prod = 1;
        
        while(j<n){
            prod*= a[j];
            
            while(prod>=k){
                prod/= a[i];
                i++;
            }
            ans += (j-i+1)*(i<=j);
            j++;
        }
        return ans;
    }
};
***********************************************************4 ************************************************
string encode(string src)
{     
  //Your code here 
  char ch = src[0];
  int count = 1;
  int n = src.size();
  int i =1;
  string ans ="";
  while(i<n){
      if(src[i]==ch) count++;
      else{
          ans+= ch + to_string(count);
          ch = src[i];
          count = 1;
      }
      i++;
  }
  ans += ch + to_string(count);
  return ans;
}     
***************************************************5*******************************************************
class Solution{
public:	
	// #define ull unsigned long long
	/* Function to get the nth ugly number*/
	ull getNthUglyNo(int n) {
	    // code here
	    vector<ull> dp(n);
	    dp[0] = 1;
	    ull mul2 =2;
	    ull mul3 = 3;
	    ull mul5 = 5;
	    int i2  = 0;
	    int i3 = 0;
	    int i5 = 0;
	    ull ugnum = 1;
	    for(int i = 1;i<n;i++){
	        ugnum = min({mul2,mul3,mul5});
	        dp[i] = ugnum;
	        if(ugnum==mul2){
	            i2++;
	            mul2 = dp[i2]*2;
	        }
	        if(ugnum == mul3){
	            i3++;
	            mul3 = dp[i3]*3;
	        }
            if(ugnum==mul5){
                i5++;
                mul5 = dp[i5]*5;
            }
	    }
	    return ugnum;
	}
};
*****************************************************************6*****************************************
class Solution {
public:
    int gcd(int a,int b){
        if(b==0) return a;
        return gcd(b,a%b);
    }
    string gcdOfStrings(string str1, string str2) {
        if(str1+str2 != str2+str1) return "";
        return str1.substr(0,gcd(str1.size(),str2.size()));
    }
};

*******************************************************7***************************************************
int findPosition(int N , int M , int K) {
        // code here
        
        if(M<=N-K+1) return K+M-1;
        else{
            M -= (N-K+1);
            if(M%N==0) return N;
            else{
                return M%N;
            }
        }
    }
********************************************************8***************************************************
	int CountWays(string str){
		    // Code here
		   
		    int  p = 1e9+7;
		    int n = str.size();
		   vector<int> dp(n,0);
		    if(str[0]=='0'){
		        dp[0] = 0;
		        return  0;
		        if(str[1]=='0') dp[1] = 0;
		        else dp[1] = 1;
		    }
		    else{
		        dp[0] = 1;
		        if(stoi(str.substr(0,2))<=26) dp[1] = 2;
		        else {
		            if(str[1]!='0') dp[1] = 1;
		            else dp[1] = 0;
		        }
		    }
		   
		   for(int i = 2;i<n;i++){
		       dp[i] = dp[i] + (str[i]!='0')*dp[i-1];
		       if(stoi(str.substr(i-1,2))<=26 and str[i-1]!='0') dp[i] = dp[i] + dp[i-2];
		       //dp[i] = dp[i]%p;
		   }
		    return dp[n-1];
		}
*********************************************************9**************************************************
string printMinNumberForPattern(string S){
        // code here 
        int num = 1;
        stack<int> st;
        int n = S.size();
        string ans =  "";
        for(int i =0;i<n;i++){
            if(S[i]=='D'){
                st.push(num);
                num++;
            }
            else{
                st.push(num);
                num++;
                while(!st.empty()){
                    ans+=to_string(st.top());
                    st.pop();
                }
            }
        }
        st.push(num);
        while(!st.empty()){
            ans+=to_string(st.top());
            st.pop();
        }
        return ans;
    }
*********************************************************10*************************************************
void solve(vector<int> &arr,int n,int k)
{
    // k largest  number 
    
    priority_queue<int,vector<int>,greater<int>> heap;
    for(int i = 0;i<k;i++) heap.push(arr[i]);
    
    for(int i = k;i<n;i++){
        if(arr[i]>heap.top()){
            heap.pop();
            heap.push(arr[i]);
        }
    }

    while(!heap.empty()) {
        cout<<heap.top()<<endl;
        heap.pop();
    }
}
*********************************************************11************************************************
 int *findTwoElement(int *arr, int n) {
        // code here
        // 1.. X .. Y .. N = N(N+1)/2
        // 1 .. X..X.. N = sum
        // Y - X = N(N+1)/2 - sum
        
        // 1^2 .. X^2 .. Y^2 .. N^2  = N(N+1)(2*N+1)/6
        // 1^2 .. X^2 .. X^2 .. N^2  = sum2
        // Y^2 - X^2 = res
        // Y+X * Y-X = res
        
        //long long Asum = n*(n+1)/2;
        //long long Asum2 = n*(n+1)*(2*n+1)/6;
        //long long sum = 0,sum2 = 0;
        //for(int i = 0;i<n;i++){
        //    sum+= arr[i];
        //    sum2 += arr[i]*arr[i];
        //}
        //long long ysubx = Asum - sum;
        //long long yaddx = (Asum2 - sum2)/ysubx;
        
        //int missing  = (ysubx + yaddx)/2;
        //int repeat = (-ysubx + yaddx)/2;
        
       //int *ans = new int[2];
       //ans[0] = repeat;
       //ans[1] = missing;
        
       //return ans;
       
       int xorsum = 0;
       for(int i =0;i<n;i++) xorsum = xorsum^arr[i];
       for(int i =1;i<=n;i++) xorsum = xorsum^i;
       
      // rightmost set bit 
       int setbt = xorsum & ~(xorsum - 1);
       
        int num1 = 0;
       int num2 = 0;
       for(int i =1;i<=n;i++){
           if(i&setbt){
              num1 = num1^i;
           }
           else{
              num2 = num2^i;
           }
           
           if(arr[i-1]&setbt){
               num1 = num1^arr[i-1];
           }
           else{
               num2 = num2^arr[i-1];
           }
       }
        
       int *ans = new int[2];
       ans[0] = -1;
       ans[1] = -1;
       for(int i = 0;i<n;i++) {
           if(arr[i]==num1){
               ans[0] = num1;
               break;
           }
       }
       if(ans[0]==-1){
           ans[0] = num2;
           ans[1] = num1;
       }
       else{
           ans[1] = num2;
       }
       return ans;
        
    }
*********************************************************12*************************************************
long long int countSquare(int n){

	long long int ans = (n*(n+1))/2 * ((2*n-1)/3);
	return ans; 
}
************************************************************13*********************************************
 string decodedString(string s){
        // code here
        stack<string> st;
        int n = s.size(); 
        int i;
        for(i =0;i<n;i++){
            if(s[i]==']'){
                string temp = "";
                while(st.top()!="["){
                    temp = st.top()+temp ;
                    st.pop();
                }
                st.pop();
                
                int num = stoi(st.top());
                st.pop();
                //cout<<num<<" "<<temp<<endl;
                string ans = "";
                while(num--){
                    ans += temp;
                    //cout<<temp<<endl;
                }
                st.push(ans);
            }
            else{
                if(s[i]-'0'>=0 and s[i]-'0'<=9){
                    string temp = "";
                    while(i<n and s[i]-'0'>=0 and s[i]-'0'<=9){
                        
                        temp += s[i];
                        i++;
                    }
                    i--;
                    st.push(temp);
                }
                else{
                     string temp = "";
                    temp += s[i];
                    st.push(temp);
                }
            }
        }
        return st.top();
        
    }
************************************************************14***********************************************
 int minSubArrayLen(int target, vector<int>& nums) {
        
        int i = 0;
        int  j = 0;
        int n = nums.size();
        int ans = n;
        bool flag  =0;
        int currSum  =0;
        while(j<n){
            currSum += nums[j];
                
            while(currSum>=target){
                flag = 1;
                ans =  min(ans,j-i+1);
                currSum -= nums[i];
                i++;
            }
            j++;
        }
        return ((flag)?(ans):(0));
    }
***********************************************************15************************************************
bool canPair(vector<int> nums, int k) {
        // Code here.
         // X%k == remx => X =  nK + remx
         // Y%k == remy => Y = mK + remy
         // X+Y = (n+m)K + remx+remy
         // remx+remy = 0    or     remx+remy = K
         // remx = 0 remy = 0        remx = K - remy
         
         
        unordered_map<int,int> mp;
        int n= nums.size();
        if(n%2!=0) return 0;
        int count = 0;
        for(int i = 0;i<n;i++){
            int rem = nums[i]%k;
            mp[rem]++;
        }
        
        for(auto it:mp){
            if(it.first==0){
                if(it.second%2!=0) return 0;
            }
            else if(k%2==0 and it.first == k/2){
                if(it.second%2!=0) return 0;
            } 
            else{
                if(mp[k-it.first]!=it.second) return 0;
            }
        }
        
        return 1;
    }
******************************************************end **************************************************
